name: "CD Workflow"
on: [push]
#    pull_request:
#      types: [closed]
#      branches: [main]
jobs:
  lambda-deploy:
    #if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    steps:
      - name: "Check out Git repository"
        uses: actions/checkout@v4

      - name: "Set up Python 3.12"
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: "Install dependencies"
        run: |
          cd ./src/lambda
          mkdir package
          pip install \
          --platform manylinux2014_x86_64 \
          --target=package \
          --implementation cp \
          --python-version 3.12 \
          --only-binary=:all: --upgrade \
          pillow
  
          - name: Zip the package
            run: |
              cd ./src/lambda/package
              zip -r ../lambda_function.zip .
              cd ..
              zip lambda_function.zip lambda_function.py
  
          - name: Deploy to AWS Lambda
            uses: appleboy/lambda-action@v0.1.9
            with:
              aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws_region: ${{ secrets.AWS_DEFAULT_REGION }}
              function_name: ${{ secrets.AWS_LAMBDA_FUNCTION_NAME }}
              zip_file: lambda/lambda_function.zip
            runtime: python3.12

  deploy-ecs:
    #if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    needs: lambda-deploy
    steps:
      - name: "Check out Git repository"
        uses: actions/checkout@v4

      - name: "AWS credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: "Set up SSH key"
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ssh-key-pyproject.pem
          chmod 600 ~/.ssh/ssh-key-pyproject.pem
          ssh-keyscan -H ${{secrets.EC2_IP_ADDRESS}} >> ~/.ssh/known_hosts

      - name: "Deploy on EC2"
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key-pyproject.pem ubuntu@${{secrets.EC2_IP_ADDRESS}} << 'EOF'
            sudo su
            cd /home/ubuntu/pyproject/PyProject
            git pull
            docker compose build
            docker compose up -d
          EOF
